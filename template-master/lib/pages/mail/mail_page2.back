import 'dart:io';

import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:template/blocs/global_bloc.dart';
import 'package:template/blocs/mail/mail_bloc.dart';
import 'package:template/utils/folder_picker.dart';
import 'package:template/utils/uidata.dart';
import 'package:template/utils/validator.dart';
import 'package:template/widgets/custom_text_form_field_widget.dart';
// import 'package:folder_picker/folder_picker.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:path_provider/path_provider.dart';
import 'package:rxdart/subjects.dart';
class MailPage extends StatefulWidget {
  @override
  _MailPageState createState() => _MailPageState();
}

class _MailPageState extends State<MailPage> with ValidationMixin{
  GlobalKey<FormState> _formKey;
  GlobalBloc globalBloc;
  MailBloc mailBloc;
  TextEditingController _subjectController, _messageController, _signatureController, _fileNameController;
  Directory dir;
  @override
  void initState(){
    _formKey = GlobalKey<FormState>();

    globalBloc = GlobalBloc();
    globalBloc.generateFocusNode(3);

    mailBloc = MailBloc();

    _subjectController = TextEditingController();
    _messageController = TextEditingController();
    _signatureController = TextEditingController();
    _fileNameController = TextEditingController();

    reset();
    super.initState();
  }

  reset() async{
    dir = await mailBloc.getDir();
    mailBloc.getFileName();
    _subjectController.text = "";
    _messageController.text = "";
    _signatureController.text = "";

  }
  popUpAction(int index){
    if (index == 0) 
      reset();
    else if (index == 1) 
      mailBloc.saveFile(_formKey);
    else if(index == 2)
      mailBloc.openFile(subject: _subjectController, message: _messageController,signature: _signatureController);
    else if (index == 3) 
      mailBloc.deleteFile(_formKey.currentContext);
  }
  PopupMenuItem createPopUpItem(int val,IconData icon,String txt){
    return PopupMenuItem(
      value: val,
      child: Row(
        children: <Widget>[
          Icon(icon),
          SizedBox(width:10),
          Text(txt),
        ],
      ),
    );
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Mail"),
        actions: <Widget>[
          InkWell(
            onTap: ()=>mailBloc.shareMail(_formKey),
            child: Padding(
              padding: EdgeInsets.symmetric(horizontal: 15),
              child: Icon(Icons.send),
            ),
          ),
          PopupMenuButton(
            onSelected: (val)=> popUpAction(val),
            icon: Icon(Icons.more_vert,color: UIData.bcContactColor,),
            itemBuilder: (BuildContext popUpContext) {
              return [
                createPopUpItem(0, Icons.restore, "Reset"),
                createPopUpItem(1, Icons.save, "Save"),
                createPopUpItem(2, FontAwesomeIcons.folderOpen, "Open"),
                createPopUpItem(3, Icons.delete, "Delete"),
              ];
            },
          ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          children: <Widget>[
            Container(
              padding: EdgeInsets.all(10),
              width: MediaQuery.of(context).size.width,
              color: Colors.grey,
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: <Widget>[
                  StreamBuilder(
                    initialData: dir,
                    stream: mailBloc.directoryStream,
                    builder: (ctxFileName,AsyncSnapshot<Directory> snapDir){
                      if(!snapDir.hasData || snapDir.data == null) return Expanded(child: Text("Directory Path : -"));
                      return Expanded(child: Text("Directory Path : ${snapDir.data.path}"));
                    },
                  ),
                  InkWell(            // ),
                    onTap: () => Navigator.of(context).push<FolderPicker>(
                        MaterialPageRoute(
                          builder: (BuildContext context) {
                              return FolderPicker(
                                rootDirectory: Directory(dir.path.replaceAll("/template", "")), 
                                action: (BuildContext context, Directory folder) async {
                                  mailBloc.saveDirectory(folder);
                                });
                    })),
                    child: Container(
                      padding: EdgeInsets.all(5),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        border: Border.all(color: Colors.white,width: 1)
                      ),
                      child: Text("Change"),
                    ),
                  )
                ],
              ),
            ),
            Container(
              padding: EdgeInsets.all(10),
              width: MediaQuery.of(context).size.width,
              color: Colors.grey,
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: <Widget>[
                  StreamBuilder(
                    initialData: "-",
                    stream: mailBloc.fileNameStream,
                    builder: (ctxFileName,AsyncSnapshot<String> snapFileName){
                      return Expanded(child: Text("File Name : ${snapFileName.data}"));
                    },
                  ),
                  InkWell(
                    onTap: ()=>showDialog(context: context,
                      builder: (BuildContext ctxDialog) {
                        // return object of type Dialog
                        return AlertDialog(
                          title: Text("Set File Name"),
                          content: CustomTextFormFieldWidget(
                            labelText: "File Name",
                            textEditingController: _fileNameController,
                          ),
                          actions: <Widget>[
                            // usually buttons at the bottom of the dialog
                            FlatButton(
                              child: Text("NO"),
                              onPressed: () {
                                Navigator.of(ctxDialog).pop();
                              },
                            ),
                            FlatButton(
                              child: Text("YES"),
                              onPressed: () => mailBloc.setFileName(ctxDialog,_fileNameController.text),
                            ),
                          ],
                        );
                      }
                    ),
                    child: Container(
                      padding: EdgeInsets.all(5),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        border: Border.all(color: Colors.white,width: 1)
                      ),
                      child: Text("Change"),
                    ),
                  )
                ],
              ),
            ),
            Container(
              height: 40,
              width: MediaQuery.of(context).size.width,
              decoration: BoxDecoration(
                border: Border(bottom: BorderSide(width: 1,color: UIData.darkPrimaryColor))
              ),
              child: CustomTextFormFieldWidget(
                contentPadding: EdgeInsets.all(10),
                hintText: "Subject",
                border: InputBorder.none,
                focusNode: globalBloc.getFocusNode(0),
                nextFocusNode: globalBloc.getFocusNode(1),
                textEditingController: _subjectController,
                validator: validateRequired,
                onSaved: mailBloc.saveSubject,
              ),
            ),
            Container(
              decoration: BoxDecoration(
                border: Border(bottom: BorderSide(width: 1,color: UIData.darkPrimaryColor))
              ),
              constraints: BoxConstraints(
                minWidth: MediaQuery.of(context).size.width,
                maxWidth: MediaQuery.of(context).size.width,
                minHeight: MediaQuery.of(context).size.height - 260
              ),
              child: CustomTextFormFieldWidget(
                contentPadding: EdgeInsets.all(10),
                hintText: "Message",
                border: InputBorder.none,
                focusNode: globalBloc.getFocusNode(1),
                nextFocusNode: globalBloc.getFocusNode(2),
                textEditingController: _messageController,
                maxLines: null,
                textInputAction: TextInputAction.newline,
                validator: validateRequired,
                onSaved: mailBloc.saveMessage,
              ),
            ),
            Container(
              decoration: BoxDecoration(
                border: Border(bottom: BorderSide(width: 1,color: UIData.darkPrimaryColor))
              ),
              constraints: BoxConstraints(
                minWidth: MediaQuery.of(context).size.width,
                maxWidth: MediaQuery.of(context).size.width,
                minHeight: 120,
              ),
              child: CustomTextFormFieldWidget(
                contentPadding: EdgeInsets.all(10),
                hintText: "Signature",
                border: InputBorder.none,
                focusNode: globalBloc.getFocusNode(2),
                nextFocusNode: FocusNode(),
                textEditingController: _signatureController,
                validator: validateRequired,
                onSaved: mailBloc.saveSignature,
              ),
            ),
          ],
        ),
      ),
    );
  }
}